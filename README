I. 명세 파악
	1. 개요
		이번 과제에서는 MAC 중에서 Bell Lapadula Model인 Read Down, Write Up 방식을 구현하는 과제이다. mac라는 command line tool을 작성하고 linux의 setuid / setgid 기능과 함께 사용해 해당 policy를 구현한다.

	2. 요구 사항
		A. mac 파일의 권한 설정
			- mac command는 root user 및 root group 소유로 설정된다.
			- mac command의 permission은 6755로 설정된다.
				- mac command 실행 시 root user과 root group의 권한으로 실행된다.
		B. 객체
			1) 파일
				- 다음과 같은 보안 등급이 다른 4개의 문서 파일이 사전에 생성되어 있으며, MAC 정책에 의해 보호된다.
					- top_secret.data (TOP_SECRET)
					- secret.data (SECRET)
					- confidential.data (CONFIDENTIAL)
					- unclassified.data (UNCLASSIFIED)
				- 각 문서 파일은 아래와 같은 특징을 가진다.
					- 미리 생성되어 있음
					- root user와 root group 소유
					- Permission 0640
				- 파일의 소유자와 퍼미션은 유지되어야 한다.
		C. 객체
			- 비 root user는 모두 정책이 적용되는 user이다.
			- 사용자들의 보안 등급은 mac.policy 파일에 정의되어 있다.
				- mac.policy 파일은 root user와 root group 소유로 설정된다.
				- permission은 0640으로 설정된다.
				- 형식은 `<user_name>:<security_level>`이다.
		D. 접근 제어 도구 mac
			- 비 root user가 파일에 접근하지 못하도록 하기 위해 mac 프로그램을 통해 파일 접근이 이루어진다.
		E. Root 권한 해제
			- mac 실행 중에는 더 이상 root 권한이 필요하지 않을 경우 euid와 egid를 변경해 root 권한을 해제해야 한다.
		F. Log 기록
			- root 권한 해제 후 명령어 인자를 사용자별 로그 파일 <usernname>.log에 기록한다.
				- 단, 파일에 작성된 데이터 내용은 기록하지 않는다.
			- 로그 파일이 없을 경우 자동적으로 생성되며, 해당 사용자 소유이며 퍼미션은 0640이어야 한다.
		G. 명령어 인터페이스
			- 모든 입력 값은 [a-zA-Z0-9_\-\.] 형식이며, 대소문자 구분된다.
			1) read
				- ./mac read <file_name>
				A) 조건
					- mac.policy에 사용자 정보가 있어야 함
					- Read-Down Policy에 따라 접근이 허용되어야 함
				B) 동작
					- 읽기 허용시: 파일 내용 + 줄바꿈
					- 읽기 거부시: "ACCESS DENIED"
			2) write
				- ./mac write <file_name> <data>
				A) 조건
					- mac.policy에 사용자 정보가 있어야 함
					- 사용자 등급 확인
					- Write-Up Policy에 따라 접근이 허용되어야 함
				B) 동작
					- 쓰기 허용시: 아무 메시지 없음
					- 쓰기 거부시: "ACCESS DENIED"

II. 설계
	1. 구조 설계
		A. 전체 구조
			1) 전체적인 프로젝트 이름 규약
				A) 폴더
					- 폴더의 이름은 하위 헤더 파일들의 공통적인 목적을 나타내는 이름으로 설정한다.
					- 폴더의 이름은 소문자 알파벳으로 설정한다.
					- 폴더의 이름은 복수형으로 한다.
					- 예시: utils/, policies/, controllers 등
				B) 헤더 파일
					- 헤더 파일의 이름은 목적의 대상자가 되는 객체 혹은 구조체의 이름으로 설정한다.
					- 헤더 파일의 이름은 소문자 알파벳으로 설정한다.
					- 헤더 파일의 이름은 단수형으로 한다.
					- 예시: user.h, file.h, string.h 등
		B. 폴더 구조
			1) controllers/
				- handler를 기반으로 더 구체화된 기능을 제공하는 헤더 파일들로 구성된다.
			2) enums/
				- 프로젝트에서 사용될 enum 타입을 정의하는 헤더 파일들로 구성된다.
			3) handlers/
				- 실질적인 파일 처리, 로그 처리와 같은 핵심적인 기능을 제공하는 헤더 파일들로 구성된다.
			4) macros/
				- 매크로 상수들을 정의하는 헤더 파일들로 구성된다.
			5) policies/
				- 정책을 정의하는 헤더 파일들로 구성된다.
			6) utils/
				- 유틸리티 함수들을 정의하는 헤더 파일들로 구성된다.
		C. 프로세스 진입 파일
			1) mac.c
				- 프로그램의 진입점으로, 전체적인 흐름을 제어한다.
				- 프로그램의 실행을 위한 초기화 작업을 수행하고, 입력된 명령어에 따라 분기를 나누어 처리한다.
	2. 구현
		A. read
			1) argv[1]에 read가 입력되었을 경우 handlers/file.c의 file_read 함수를 호출한다.
			2) file_read 함수는 내부적으로 아래와 같이 동작한다.
				A) file_read 함수는 인자로 전달된 파일 이름과 사용자 이름을 바탕으로 각각의 보안 등급을 확인한다.
				B) 보안 등급을 확인한 후, Read-Down Policy에 따라 접근이 허용되는지 확인한다.
					B-2) 접근이 허용될 경우, 파일을 열고 내용을 읽어와 출력한다.
				C) 접근 여부와 관계 없이, 읽을 파일에 대한 접근이 완료되면 root 권한을 해제한다.
				D) root 권한 해제 후, 로그 파일에 형식에 맞추어 동작을 기록한다.
				E) 파일 여는 것에 실패한 경우, 접근 권한이 없는 것으로 간주, "ACCESS DENIED"를 출력한다.
		B. write
			1) argv[1]에 write가 입력되었을 경우 handlers/file.c의 file_write 함수를 호출한다.
			2) file_write 함수는 내부적으로 아래와 같이 동작한다.
				A) file_write 함수는 인자로 전달된 파일 이름과 사용자 이름을 바탕으로 각각의 보안 등급을 확인한다.
				B) 보안 등급을 확인한 후, Write-Up Policy에 따라 접근이 허용되는지 확인한다.
					B-2) 접근이 허용될 경우, 파일을 열고 내용을 작성한다.
				C) 접근 여부와 관계 없이, 읽을 파일에 대한 접근이 완료되면 root 권한을 해제한다.
				D) root 권한 해제 후, 로그 파일에 형식에 맞추어 동작을 기록한다.
				E) 파일 여는 것에 실패한 경우, 접근 권한이 없는 것으로 간주, "ACCESS DENIED"를 출력한다. 
